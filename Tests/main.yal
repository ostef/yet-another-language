external proc malloc (size : u64) -> *void;
external proc realloc (ptr : *void, new_size : u64) -> *void;
external proc free (ptr : *void);
external proc WriteString (str : string);

const Pi := 3.1415926;
const Tau := Pi * 2.0;

enum AllocatorOperation u8
{
    Alloc;
    Free;
    Resize;
}

typedef AllocatorProc = proc (AllocatorOperation, size : s64, ptr : *void, new_size : s64, data : *void) -> *void;

struct Allocator
{
    var data : *void;
    var procedure : AllocatorProc;
}

proc ToRads (x : float) -> float
{
    return x * (Pi / 180.0);
}

proc ToDegs (x : float) -> float
{
    return x * (180.0 / Pi);
}

proc Min (a : float, b : float) -> float
{
    if a < b
        return a;

    return b;
}

proc Max (a : float, b : float) -> float
{
    if a > b
        return a;

    return b;
}

proc Abs (x : float) -> float
{
    if x < 0.0
        return -x;

    return x;
}

proc Sign (x : float) -> float
{
    if x < 0.0
        return -1;

    return 1;
}

proc MakeString (count : s64, data : *u8) -> string
{
    var result : string;
    result.data = data;
    result.count = count;

    return result;
}

proc WriteUnsignedNumber (val : u64)
{
    var buffer : [20]u8;

    var len := 0;
    var tmp := val;
    while len == 0 || tmp != 0
    {
        tmp /= 10;
        len += 1;
    }

    var i := 0;
    while i < len
    {
        var digit := cast (u8) val % 10;
        val /= 10;

        buffer[len - i - 1] = cast (u8) ('0' + digit);

        i += 1;
    }

    WriteString (MakeString (len, buffer.data));
}

proc WriteNumber (val : s64)
{
    var unsigned_val : u64;

    if val < 0
    {
        WriteString ("-");
        unsigned_val = cast (u64) -val;
    }
    else
    {
        unsigned_val = cast (u64) val;
    }

    WriteUnsignedNumber (unsigned_val);
}

proc StringLength (str : *u8) -> s64
{
    var i := 0;
    while str[i] != 0
        i += 1;

    return i;
}

proc Alloc (size : s64, allocator : Allocator) -> *void
{
    if size <= 0
        return null;

    return allocator.procedure (AllocatorOperation.Alloc, size, null, 0, allocator.data);
}

proc Free (ptr : *void, allocator : Allocator)
{
    if ptr == null
        return;

    allocator.procedure (AllocatorOperation.Free, 0, ptr, 0, allocator.data);
}

struct MemoryArenaPage
{
    var prev : *MemoryArenaPage;
    var size : s64;
    var used : s64;
}

struct MemoryArena
{
    var page_allocator : Allocator;
    var total_size : s64;
    var total_used : s64;
    var page : *MemoryArenaPage;
    var default_page_size : s64;
}

proc MemoryArenaFreePages (arena : *MemoryArena, until : *MemoryArenaPage)
{
    while arena.page != null && arena.page != until
    {
        var prev := arena.page.prev;

        arena.total_size -= arena.page.size;
        arena.total_used -= arena.page.used;
        Free (arena.page, arena.page_allocator);

        arena.page = prev;
    }
}

proc MemoryArenaAddPage (arena : *MemoryArena, size : s64) -> bool
{
    if size < arena.default_page_size
        size = arena.default_page_size;

    var page := cast (*MemoryArenaPage) Alloc (size_of (MemoryArenaPage) + size, arena.page_allocator);
    if page == null
        return false;

    page.size = size;
    page.prev = arena.page;

    arena.total_size += size;
    arena.page = page;

    return true;
}

proc MemoryArenaAllocatorProc (op : AllocatorOperation, size : s64, ptr : *void, new_size : s64, data : *void) -> *void
{
    var arena := cast (*MemoryArena) data;

    if op == AllocatorOperation.Alloc || op == AllocatorOperation.Resize
    {
        if size <= 0
            return null;

        var aligned_size := (size + 7) & ^7;
        if arena.page != null || arena.page.used + aligned_size > arena.page.size
        {
            if !MemoryArenaAddPage (arena, aligned_size)
                return null;
        }

        var ptr := cast (u64) (cast (*u8) (arena.page + 1) + arena.page.used);
        var aligned_ptr := cast (*void) ((cast (s64) ptr + 7) & ^7);

        arena.page.used += aligned_size;
        arena.total_used += aligned_size;

        return cast (*void) aligned_ptr;
    }

    return null;
}

proc Main (args : []string)
{
    var i := 0;
    while i < args.count
    {
        WriteString (args[i]);
        WriteString ("\n");

        var len := StringLength (args[i].data);
        WriteUnsignedNumber (cast (u64) len);
        WriteString ("\n");

        i += 1;
    }
}
